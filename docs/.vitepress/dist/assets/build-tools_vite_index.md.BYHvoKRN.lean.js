import{_ as i,C as l,c as n,o,j as t,ag as d,a,G as p,w as r}from"./chunks/framework.Ds6Eueu6.js";const V=JSON.parse('{"title":"Vite","description":"","frontmatter":{},"headers":[],"relativePath":"build-tools/vite/index.md","filePath":"build-tools/vite/index.md"}'),u={name:"build-tools/vite/index.md"},h={class:"danger custom-block"};function c(b,e,k,v,m,g){const s=l("Details");return o(),n("div",null,[e[2]||(e[2]=t("h1",{id:"vite",tabindex:"-1"},[a("Vite "),t("a",{class:"header-anchor",href:"#vite","aria-label":'Permalink to "Vite"'},"​")],-1)),e[3]||(e[3]=t("p",null,"Vite 是一个现代化前端构建工具，旨在提供快速、高效的开发与构建体验。传统 Webpack 通过 Loader 与 Plugin 来解析、构建依赖图并打包所有资源作为一个或多个 bundle 文件，这一过程在大型项目中可能导致整个项目启动和构建速度缓慢。",-1)),e[4]||(e[4]=t("p",null,[a("而 Vite 利用浏览器原生 EMS 支持，在开发阶段通过 esbuild 进行快速转义和按需加载，从而实现几乎瞬时的 "),t("strong",null,"冷启动"),a(" 和 "),t("strong",null,"高效 HMR"),a("。在生产环境中，Vite 默认使用 Rollup 进行打包，充分利用 Rollup 的 Tree Shaking、代码分割和输出优化能力，生成高性能的静态资源，同时也可通过配置使用 esbuild 加速部分转译任务。")],-1)),t("div",h,[e[1]||(e[1]=t("p",{class:"custom-block-title"},"ESM 的局限性",-1)),p(s,null,{default:r(()=>e[0]||(e[0]=[a(" 浏览器原生的 ES Module（ESM）加载机制无法识别来自 node_modules 或裸模块的导入。它仅能识别以 `/` 的绝对路径、`./`或`../` 的相对路径或 `http(s)开头` 的网络路径。这意味着，对浏览器而言，node_modules 中的内容是 **不可见的**。 "),t("p",null,[t("strong",null,"这里需要强调："),a(" 浏览器不是因为缺少完整的 node_modules 就无法访问；而是从来就不认识 node_modules 或裸模块路径，即使将整个 node_modules 目录都放在根目录下，浏览器也是无法识别的。")],-1)])),_:1})]),e[5]||(e[5]=d("",5))])}const F=i(u,[["render",c]]);export{V as __pageData,F as default};
